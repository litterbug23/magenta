# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

syscall process_exit
    (retcode: int) noreturn;

syscall current_time (uint32_t clock_id)
    returns (mx_time_t);

syscall nanosleep
    (nanoseconds: mx_time_t)
    returns (mx_status_t);

syscall num_cpus ()
    returns (uint32_t);

# Legacy LK debug syscalls

syscall debug_read
    (handle: mx_handle_t, buffer: any[length] OUT, length: uint32_t)
    returns (mx_status_t);

syscall debug_write
    (buffer: any[length] IN, length: uint32_t)
    returns (mx_status_t);

syscall debug_send_command
    (resource_handle: mx_handle_t, buffer: any[length] IN, length: uint32_t)
    returns (mx_status_t);

# Temporary syscall to aid debuggers

syscall object_get_child
    (handle: mx_handle_t, koid: uint64_t, out: mx_handle_t[1] OUT)
    returns (mx_status_t);

syscall debug_transfer_handle
    (proc: mx_handle_t, handle: mx_handle_t)
    returns (mx_handle_t);

syscall process_read_memory
    (proc: mx_handle_t, vaddr: uintptr_t,
    buffer: any[len] OUT, len: mx_size_t, actual: mx_size_t[1] OUT)
    returns (mx_status_t);

syscall process_write_memory
    (proc: mx_handle_t, vaddr: uintptr_t,
    buffer: any[len] IN, len: mx_size_t, actual: mx_size_t[1] OUT)
    returns (mx_status_t);

# Tracing

syscall ktrace_read
    (handle: mx_handle_t, data: any[len] OUT, offset: uint32_t, len: uint32_t, actual: uint32_t[1] OUT)
    returns (mx_status_t);

syscall ktrace_control
    (handle: mx_handle_t, action: uint32_t, options: uint32_t, ptr: any[action] INOUT)
    returns (mx_status_t);

syscall ktrace_write
    (handle: mx_handle_t, id: uint32_t, arg0: uint32_t, arg1: uint32_t)
    returns (mx_status_t);

# Logging

syscall log_create
    (flags: uint32_t)
    returns (mx_handle_t);

syscall log_write
    (handle: mx_handle_t, len: uint32_t, buffer: any[len] IN, flags: uint32_t)
    returns (mx_status_t);

syscall log_read
    (handle: mx_handle_t, len: uint32_t, buffer: any[len] OUT, flags: uint32_t)
    returns (mx_status_t);

# Generic handle operations

syscall handle_close
    (handle: mx_handle_t)
    returns (mx_status_t);

syscall handle_duplicate
    (handle: mx_handle_t, rights: mx_rights_t, out: mx_handle_t[1] OUT)
    returns (mx_status_t);

syscall handle_wait_one
    (handle: mx_handle_t, waitfor: mx_signals_t, timeout: mx_time_t,
        observed: mx_signals_t[1] OUT)
    returns (mx_status_t);

syscall handle_wait_many
    (handles: mx_wait_item_t[count] INOUT, count: uint32_t, timeout: mx_time_t)
    returns (mx_status_t);

syscall handle_replace
    (handle: mx_handle_t, rights: mx_rights_t, out: mx_handle_t[1] OUT)
    returns (mx_status_t);

# Generic object operations

syscall object_signal
    (handle: mx_handle_t, clear_mask: uint32_t, set_mask: uint32_t)
    returns (mx_status_t);

syscall object_signal_peer
    (handle: mx_handle_t, clear_mask: uint32_t, set_mask: uint32_t)
    returns (mx_status_t);

syscall object_get_info
    (handle: mx_handle_t, topic: uint32_t,
        buffer: any[buffer_size] OUT, buffer_size: mx_size_t,
        actual: mx_size_t[1] OUT, avail: mx_size_t[1] OUT)
    returns (mx_status_t);

# Threads

syscall thread_create
    (process: mx_handle_t, name: char[name_len] IN, name_len: uint32_t,
        flags: uint32_t, out: mx_handle_t[1] OUT)
    returns (mx_status_t);

syscall thread_start
    (handle: mx_handle_t, thread_entry: uintptr_t,
        stack: uintptr_t, arg1: uintptr_t, arg2: uintptr_t)
    returns (mx_status_t);

syscall thread_exit () noreturn;

syscall thread_arch_prctl
    (handle: mx_handle_t, op: uint32_t, value_ptr: uintptr_t[1] INOUT)
    returns (mx_status_t);

# Messages

syscall channel_create
    (flags: uint32_t, out0: mx_handle_t OUT, out1: mx_handle_t OUT)
    returns (mx_status_t);

syscall channel_read
    (handle: mx_handle_t, flags: uint32_t,
        bytes: any[num_bytes] OUT,
        num_bytes: uint32_t, actual_bytes: uint32_t[1] OUT,
        handles: mx_handle_t[num_handles] OUT,
        num_handles: uint32_t, actual_handles: uint32_t[1] OUT)
    returns (mx_status_t);

syscall channel_write
    (handle: mx_handle_t, flags: uint32_t,
        bytes: any[num_bytes] IN, num_bytes: uint32_t,
        handles: mx_handle_t[num_handles] IN, num_handles: uint32_t,
        )
    returns (mx_status_t);

# Drivers

syscall interrupt_create
    (handle: mx_handle_t, vector: uint32_t, flags: uint32_t)
    returns (mx_handle_t);

syscall interrupt_complete
    (handle: mx_handle_t)
    returns (mx_status_t);

# Processes

syscall process_create
    (job: mx_handle_t, name: char[name_len] IN, name_len: uint32_t, flags: uint32_t,
        proc_handle: mx_handle_t[1] OUT, vmar_handle: mx_handle_t[1] OUT)
    returns (mx_status_t);

syscall process_start
    (process_handle: mx_handle_t, thread_handle: mx_handle_t, entry: uintptr_t,
        stack: uintptr_t, arg_handle: mx_handle_t, arg2: uintptr_t)
    returns (mx_status_t);

# Shared between process and threads

syscall task_resume
    (task_handle: mx_handle_t, options: uint32_t)
    returns (mx_status_t);

syscall task_kill
    (task_handle: mx_handle_t)
    returns (mx_status_t);

# Synchronization

syscall event_create
    (options: uint32_t, out: mx_handle_t[1] OUT)
    returns (mx_status_t);

syscall eventpair_create
    (uint32_t options, out0: mx_handle_t[1] OUT, out1: mx_handle_t[1] OUT)
    returns (mx_status_t);

syscall futex_wait
    (value_ptr: mx_futex_t[1] INOUT, current_value: mx_futex_t, timeout: mx_time_t)
    returns (mx_status_t);

syscall futex_wake
    (value_ptr: mx_futex_t[1] INOUT, count: uint32_t)
    returns (mx_status_t);

syscall futex_requeue
    (wake_ptr: mx_futex_t[1] INOUT, wake_count: uint32_t, current_value: mx_futex_t,
        requeue_ptr: mx_futex_t[1] INOUT, requeue_count: uint32_t)
    returns (mx_status_t);

# Memory management

syscall vmo_create
    (size: uint64_t, options: uint32_t, out: mx_handle_t[1] OUT)
    returns (mx_status_t);

syscall vmo_read
    (handle: mx_handle_t, data: any[len] OUT, offset: uint64_t, len: mx_size_t, actual: mx_size_t)
    returns (mx_status_t);

syscall vmo_write
    (handle: mx_handle_t, data: any[len] IN, offset: uint64_t, len: mx_size_t, actual: mx_size_t)
    returns (mx_status_t);

syscall vmo_get_size
    (handle: mx_handle_t, size: uint64_t[1] OUT)
    returns (mx_status_t);

syscall vmo_set_size
    (handle: mx_handle_t, size: uint64_t)
    returns (mx_status_t);

syscall vmo_op_range
    (handle: mx_handle_t, op: uint32_t, offset: uint64_t, size: uint64_t,
        buffer: any[buffer_size] INOUT, buffer_size: mx_size_t)
    returns (mx_status_t);

# Address space management

syscall vmar_allocate
    (parent_vmar_handle: mx_handle_t, offset: mx_size_t, size: mx_size_t, flags: uint32_t,
        child_vmar: mx_handle_t[1] OUT, child_addr: any[1] OUT)
     returns (mx_status_t);

syscall vmar_destroy
    (vmar_handle: mx_handle_t)
    returns (mx_status_t);

syscall vmar_map
    (vmar_handle: mx_handle_t, vmar_offset: mx_size_t,
        vmo_handle: mx_handle_t, vmo_offset: uint64_t,
        len: mx_size_t, flags: uint32_t, mapped_addr: any[1] OUT)
    returns (mx_status_t);

syscall vmar_unmap
    (vmar_handle: mx_handle_t, offset: mx_size_t, len: mx_size_t)
    returns (mx_status_t);

syscall vmar_protect
    (vmar_handle: mx_handle_t, offset: mx_size_t, len: mx_size_t,
        prot: uint32_t)
    returns (mx_status_t);

# temporary syscalls to access port and memory mapped devices

syscall mmap_device_io
    (handle: mx_handle_t, io_addr: uint32_t, len: uint32_t)
    returns (mx_status_t);

syscall mmap_device_memory
    (handle: mx_handle_t, paddr: mx_paddr_t, len: uint32_t,
        cache_policy: mx_cache_policy_t, out_vaddr: any[1] OUT)
    returns (mx_status_t);

syscall alloc_device_memory
    (handle: mx_handle_t, len: uint32_t, out_paddr: mx_paddr_t[1] OUT, out_vaddr: any[1] OUT)
    returns (mx_status_t);

syscall cprng_draw
    (buffer: any[len] OUT, len: mx_size_t, actual: mx_size_t[1] OUT)
    returns (mx_status_t);

# TODO(security)

syscall cprng_add_entropy
    (buffer: any[len] IN, len: mx_size_t)
    returns (mx_status_t);

# TODO(security)

syscall bootloader_fb_get_info
    (format: uint32_t[1] OUT,
        width: uint32_t[1] OUT, height: uint32_t[1] OUT, stride: uint32_t[1] OUT)
    returns (mx_status_t);

syscall set_framebuffer
    (handle: mx_handle_t, vaddr: any[1] IN, len: uint32_t, format: uint32_t,
        width: uint32_t, height: uint32_t, stride: uint32_t)
    returns (mx_status_t);

# temporary pci syscalls
# TODO: remove when the pci driver moves to user space

syscall pci_get_nth_device
    (handle: mx_handle_t, index: uint32_t, out_info: mx_pcie_get_nth_info_t[1] OUT)
    returns (mx_handle_t);

syscall pci_claim_device
    (handle: mx_handle_t)
    returns (mx_status_t);

syscall pci_enable_bus_master
    (handle: mx_handle_t, enable: bool)
    returns (mx_status_t);

syscall pci_reset_device
    (handle: mx_handle_t)
    returns (mx_status_t);

syscall pci_map_mmio
    (handle: mx_handle_t, bar_num: uint32_t, cache_policy: mx_cache_policy_t)
    returns (mx_handle_t);

syscall pci_io_write
    (handle: mx_handle_t, bar_num: uint32_t, offset: uint32_t, len: uint32_t, value: uint32_t)
    returns (mx_status_t);

syscall pci_io_read
    (handle: mx_handle_t, bar_num: uint32_t,
        offset: uint32_t, len: uint32_t, out_value: uint32_t[1] OUT)
    returns (mx_status_t);

syscall pci_map_interrupt
    (handle: mx_handle_t, which_irq: int32_t)
    returns (mx_handle_t);

syscall pci_map_config
    (handle: mx_handle_t)
    returns (mx_handle_t);

syscall pci_query_irq_mode_caps
    (handle: mx_handle_t, mode: mx_pci_irq_mode_t, out_max_irqs: uint32_t[1] OUT)
    returns (mx_status_t);

syscall pci_set_irq_mode
    (handle: mx_handle_t, mode: mx_pci_irq_mode_t, requested_irq_count: uint32_t)
    returns (mx_status_t);

syscall pci_init
    (handle: mx_handle_t, init_buf: mx_pci_init_arg_t[len] IN, len: uint32_t)
    returns (mx_status_t);

# I/O mapping objects
syscall io_mapping_get_info
    (handle: mx_handle_t, out_vaddr: any[1] OUT, out_size: uint64_t[1] OUT)
    returns (mx_status_t);

# exception handlers
syscall object_bind_exception_port
    (object: mx_handle_t, eport: mx_handle_t, key: uint64_t, options: uint32_t)
    returns (mx_status_t);

# IO Ports

syscall port_create
    (options: uint32_t, out: mx_handle_t[1] OUT)
    returns (mx_handle_t);

syscall port_queue
    (handle: mx_handle_t, packet: any[size] IN, size: mx_size_t)
    returns (mx_status_t);

syscall port_wait
    (handle: mx_handle_t, timeout: mx_time_t, packet: any[size] OUT, size: mx_size_t)
    returns (mx_status_t);

syscall port_bind
    (handle: mx_handle_t, key: uint64_t, source: mx_handle_t, signals: mx_signals_t)
    returns (mx_status_t);

# Data Pipe

syscall datapipe_create
    (options: uint32_t, element_size: mx_size_t, capacity: mx_size_t, handle: mx_handle_t[1] OUT)
    returns (mx_handle_t);

syscall datapipe_write
    (handle: mx_handle_t, flags: uint32_t, requested: mx_size_t, buffer: any[requested] IN)
    returns (mx_ssize_t);

syscall datapipe_read
    (handle: mx_handle_t, flags: uint32_t, requested: mx_size_t,
        buffer: any[requested] OUT)
    returns (mx_ssize_t);

syscall datapipe_begin_write
    (handle: mx_handle_t, flags: uint32_t, buffer: uintptr_t[1] OUT)
    returns (mx_ssize_t);

syscall datapipe_end_write
    (handle: mx_handle_t, written: mx_size_t)
    returns (mx_status_t);

syscall datapipe_begin_read
    (handle: mx_handle_t, flags: uint32_t, buffer: uintptr_t[1] OUT)
    returns (mx_ssize_t);

syscall datapipe_end_read
    (handle: mx_handle_t, read: mx_size_t)
    returns (mx_status_t);

# Wait sets

syscall waitset_create (options: uint32_t, out: mx_handle_t[1] OUT)
    returns (mx_status_t);

syscall waitset_add
    (waitset_handle: mx_handle_t, cookie: uint64_t,
        handle: mx_handle_t, signals: mx_signals_t)
    returns (mx_status_t);

syscall waitset_remove
    (waitset_handle: mx_handle_t, cookie: uint64_t)
    returns (mx_status_t);

syscall waitset_wait
    (waitset_handle: mx_handle_t, timeout: mx_time_t,
        results: mx_waitset_result_t[count] OUT, count: uint32_t[1] INOUT)
    returns (mx_status_t);

# Object Properties

syscall object_get_property
    (handle: mx_handle_t, property: uint32_t, value: any[size] OUT, size: mx_size_t)
    returns (mx_status_t);

syscall object_set_property
    (handle: mx_handle_t, property: uint32_t, value: any[size] IN, size: mx_size_t)
    returns (mx_status_t);

# Privileged syscalls for ACPI support

syscall acpi_uefi_rsdp
    (handle: mx_handle_t)
    returns (uint32_t);

syscall acpi_cache_flush
    (handle: mx_handle_t)
    returns (mx_status_t);

# Sockets

syscall socket_create
    (options: uint32_t, out0: mx_handle_t[1] OUT, out1: mx_handle_t[1] OUT)
    returns (mx_status_t);

syscall socket_write
    (handle: mx_handle_t, flags: uint32_t, buffer: any[size] IN, size: mx_size_t, actual: mx_size_t[1] OUT)
    returns (mx_status_t);

syscall socket_read (handle: mx_handle_t, flags: uint32_t, buffer: any[size] OUT, size: mx_size_t, actual: mx_size_t[1] OUT)
    returns (mx_status_t);

# Debugger calls

syscall thread_read_state
    (handle: mx_handle_t, kind: uint32_t,
        buffer: any[buffer_len] OUT, len: uint32_t, actual: uint32_t[1] OUT)
    returns (mx_status_t);

syscall thread_write_state
    (handle: mx_handle_t, kind: uint32_t, buffer: any[buffer_len] IN, buffer_len: uint32_t)
    returns (mx_status_t);

# Jobs

syscall job_create
    (parent_job: mx_handle_t, flags: uint32_t, out: mx_handle_t[1] OUT)
    returns (mx_status_t);

# Resources

syscall resource_create
    (parent_handle: mx_handle_t, records: mx_rrec_t[count] IN, count: uint32_t,
    resource_out: mx_handle_t[1] OUT, msgpipe_out: mx_handle_t[1] OUT)
    returns (mx_status_t);

syscall resource_get_handle
    (handle: mx_handle_t, index: uint32_t, options: uint32_t, out: mx_handle_t[1] OUT)
    returns (mx_status_t);

syscall resource_do_action
    (handle: mx_handle_t, index: uint32_t, action: uint32_t, arg0: uint32_t, arg1: uint32_t)
    returns (mx_status_t);

syscall resource_connect
    (handle: mx_handle_t, msgpipe: mx_handle_t)
    returns (mx_status_t);

# Test syscalls (keep at the end)

syscall syscall_test_0() returns (int);
syscall syscall_test_1(a:int) returns (int);
syscall syscall_test_2(a:int, b:int) returns (int);
syscall syscall_test_3(a:int, b:int, c:int) returns (int);
syscall syscall_test_4(a:int, b:int, c:int, d:int) returns (int);
syscall syscall_test_5(a:int, b:int, c:int, d:int, e:int) returns (int);
syscall syscall_test_6(a:int, b:int, c:int, d:int, e:int, f:int) returns (int);
syscall syscall_test_7(a:int, b:int, c:int, d:int, e:int, f:int, g:int) returns (int);
syscall syscall_test_8(a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int) returns (int);
